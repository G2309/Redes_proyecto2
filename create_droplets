#!/usr/bin/env bash
set -euo pipefail
: "${DIGITALOCEAN_TOKEN:?Define DIGITALOCEAN_TOKEN env var}"
: "${REGION:=nyc3}"
: "${IMAGE:=ubuntu-22-04-x64}"
: "${SIZE:=s-1vcpu-1gb}"
: "${SSH_KEY_ID:?Define SSH_KEY_ID env var (id, fingerprint or public key starting with ssh-)}"
: "${PROJECT_ID:=b36a3f69-d582-4ee6-bf0f-f9b19090e13d}"
CIDR_FILE="${1:-cidrs.txt}"
api_post(){ local url="$1"; shift; curl -s -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" -d "$@" "https://api.digitalocean.com/v2${url}"; }
api_get(){ local url="$1"; curl -s -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" "https://api.digitalocean.com/v2${url}"; }
mkdir -p .do-outputs
echo "vpc_name,cidr,vpc_id,droplet_name,droplet_id,action" > .do-outputs/created.csv
if [[ "$SSH_KEY_ID" == ssh-* ]]; then
  key_json=$(api_post /account/keys "$(jq -nc --arg n "key-$(date +%s)" --arg k "$SSH_KEY_ID" '{name:$n,public_key:$k}')")
  KEY_ID=$(echo "$key_json" | jq -r '.ssh_key.id // empty')
  if [ -z "$KEY_ID" ]; then
    echo "Failed to import SSH public key"
    echo "$key_json" | jq
    exit 1
  fi
else
  KEY_ID="$SSH_KEY_ID"
fi
mapfile -t existing_vpcs < <(api_get /vpcs | jq -r '.vpcs[] | "\(.ip_range)|\(.id)|\(.name)"')
while IFS= read -r cidr || [ -n "$cidr" ]; do
  [[ -z "$cidr" ]] && continue
  [[ "$cidr" =~ ^# ]] && continue
  canonical=$(python3 - "$cidr" <<PY
import sys,ipaddress
try:
    n=ipaddress.ip_network(sys.argv[1], strict=False)
    print(f"{n.network_address}/{n.prefixlen}")
except Exception as e:
    print("ERROR:"+str(e))
PY
)
  if [[ "$canonical" == ERROR:* ]]; then
    echo "Skipping invalid CIDR $cidr"
    echo "invalid,${cidr},, , ,invalid-cidr" >> .do-outputs/created.csv
    continue
  fi
  safe_name=$(echo "$canonical" | tr '/.' '-' | tr -s '-' | sed 's/^-//; s/-$//')
  vpc_name="vpc-${safe_name}"
  reuse_vpc_id=""
  skip=false
  for ev in "${existing_vpcs[@]}"; do
    ev_ip=${ev%%|*}
    ev_id=${ev#*|}
    ev_id=${ev_id%%|*}
    overlap=$(python3 - "$canonical" "$ev_ip" <<'PY'
import ipaddress,sys
a=ipaddress.ip_network(sys.argv[1], strict=False)
b=ipaddress.ip_network(sys.argv[2], strict=False)
print(a.overlaps(b))
PY
)
    if [ "$overlap" = "True" ]; then
      if [ "$ev_ip" = "$canonical" ]; then
        reuse_vpc_id="$ev_id"
        break
      else
        skip=true
        break
      fi
    fi
  done
  if [ "$skip" = true ]; then
    echo "Skipping $canonical due to overlap"
    echo "${vpc_name},${canonical},, , ,skipped-overlap" >> .do-outputs/created.csv
    continue
  fi
  if [ -n "$reuse_vpc_id" ]; then
    vpc_id="$reuse_vpc_id"
    action="reused"
  else
    vpc_resp=$(api_post /vpcs "$(jq -nc --arg name "$vpc_name" --arg region "$REGION" --arg ip_range "$canonical" --arg desc "VPC for $canonical" '{name:$name,region:$region,ip_range:$ip_range,description:$desc}')")
    vpc_id=$(echo "$vpc_resp" | jq -r '.vpc.id // empty')
    if [ -z "$vpc_id" ]; then
      echo "$vpc_resp" | jq
      echo "${vpc_name},${canonical},, , ,create-vpc-failed" >> .do-outputs/created.csv
      continue
    fi
    action="created"
    existing_vpcs+=("${canonical}|${vpc_id}|${vpc_name}")
  fi
  for n in 1 2; do
    droplet_name="${vpc_name}-node${n}"
    payload=$(jq -nc --arg name "$droplet_name" --arg region "$REGION" --arg size "$SIZE" --arg image "$IMAGE" --arg vpc "$vpc_id" --arg key "$KEY_ID" '{name:$name,region:$region,size:$size,image:$image,vpc_uuid:$vpc,ssh_keys:[$key],backups:false,ipv6:false,monitoring:true,tags:["project-startup"]}')
    resp=$(api_post /droplets "$payload")
    did=$(echo "$resp" | jq -r '.droplet.id // empty')
    if [ -z "$did" ]; then
      echo "$resp" | jq
      echo "${vpc_name},${canonical},${vpc_id},${droplet_name},,droplet-create-failed" >> .do-outputs/created.csv
      continue
    fi
    
    # Asignar droplet al proyecto
    echo "Assigning droplet $did to project proyecto2_redes..."
    assign_resp=$(api_post "/projects/${PROJECT_ID}/resources" \
      "$(jq -nc --arg urn "do:droplet:$did" '{resources:[$urn]}')")
    
    echo "${vpc_name},${canonical},${vpc_id},${droplet_name},${did},${action}" >> .do-outputs/created.csv
  done
done < "$CIDR_FILE"
echo "done"
